<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Web Portfolio of John Westhoff</title>
    <link>https://www.johnbot.me/tags/projects/</link>
    <description>Recent content in Projects on Web Portfolio of John Westhoff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Jul 2016 23:24:00 -0400</lastBuildDate>
    <atom:link href="https://www.johnbot.me/tags/projects/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Multiplayer Spaceship Game</title>
      <link>https://www.johnbot.me/post/vrremake/</link>
      <pubDate>Sun, 17 Jul 2016 23:24:00 -0400</pubDate>
      
      <guid>https://www.johnbot.me/post/vrremake/</guid>
      <description>

&lt;p&gt;Back between 2008 and 2011, I spent a fair bit of time on
&lt;a href=&#34;www.funorb.com&#34;&gt;FunOrb&lt;/a&gt;.
One of their most interesting games was their last official release,
&lt;a href=&#34;http://www.funorb.com/info.ws?game=voidhunters&#34;&gt;Void Hunters&lt;/a&gt;.
Unfortunately, FunOrb did not last much longer than that, as there has only been
a small handful of updates since then, and with the death of NPAPI Plugins, the
Java-based gaming site has virtually no chance of being revived.&lt;/p&gt;

&lt;p&gt;Some time around my freshman year at Notre Dame, I decided that it would be fun
to recreate the game. As a huge fan of split screen gaming, my version would not
be online, but rather it would be played with a shared split screen and several
XBOX 360 controllers.&lt;/p&gt;

&lt;h2 id=&#34;anything-interesting-about-it:532fe2ef5e90928298cc7a64fdd6eb1e&#34;&gt;Anything Interesting About It?&lt;/h2&gt;

&lt;p&gt;Maybe.&lt;br /&gt;
The game itself essentially broke everything into two groups -
Entities (such as bullets, stars, asteroids, and nebula)
and Components (things that make up ships, like hull pieces
and thrusters). The Components are the more interesting of the two, as they
collectively form a symmetric directed graph. There are container pieces,
such as hulls, that can have other components attached to them as well
as be attached to other pieces, and other components that can only be attached.
Container pieces each contain references to their attached pieces, and
all pieces contain references to their holders. This makes it easy
for any one component to affect its holder (for instance, a thruster
adds impulse to its holder) and for any holder to affect its components (for
example, a blown up hull might destroy all of its components).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;bam.png&#34; alt=&#34;png&#34; /&gt;
The game looks pretty, if I do say so myself.&lt;/p&gt;

&lt;h2 id=&#34;any-problems:532fe2ef5e90928298cc7a64fdd6eb1e&#34;&gt;Any Problems?&lt;/h2&gt;

&lt;p&gt;Yes.&lt;br /&gt;
Using Java might have been a mistake, as I might have gotten better performance
out of C or C++. The game has pretty big performance issues, especially with
rather large ships colliding, and this is with just two people.
I also should have learned a bit more about graph theory before
starting, as I hadn&amp;rsquo;t even had an introduction to it before, and perhaps I would
have written things a bit more efficiently had I done it today with more knowledge.
Learning more OpenGL would have also been a big plus, since it was my first time
using the library. I also wish I had documented things more thoroughly.
I may restart the project, if I have the time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/JohnathonNow/VH-Remake&#34;&gt;The source is available on my GitHub.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Embedding Audio With Audacity</title>
      <link>https://www.johnbot.me/post/firstaudacityplugin/</link>
      <pubDate>Sun, 10 Jul 2016 05:51:53 -0400</pubDate>
      
      <guid>https://www.johnbot.me/post/firstaudacityplugin/</guid>
      <description>

&lt;p&gt;A friend came to me with a request to create an &lt;a href=&#34;http://www.audacityteam.org/&#34;&gt;Audacity&lt;/a&gt; plugin that,
given two stereo audio tracks, takes the second audio track and ensures that it stays
X decibels below the first audio track.&lt;/p&gt;

&lt;p&gt;The project did not take long after establishing just what it means for a track to be quieter
than another, despite me having never written anything in a LISP dialect
(Audacity uses Nyquist/XLISP) and some of the oddities of Audacity that I will describe below.&lt;/p&gt;

&lt;h2 id=&#34;quieter-audio:83c068686d9ce68651d7f4789470e27a&#34;&gt;Quieter Audio&lt;/h2&gt;

&lt;p&gt;Digital audio is more or less stored as a collection of samples of a sound wave, with many
discrete points used to approximate a continuous waveform. The friend who asked me to do the
project told me that what I should do is set every sample in the second track to the
corresponding sample in the first track minus X. This is not at all what was actually wanted,
however, as that would merely produce the first track but X decibels quieter - it would not
matter what the second track was, it would be entirely overwritten.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;starting_waveform.png&#34; alt=&#34;png&#34; /&gt;&lt;br /&gt;
My set of starting waveforms (in order of Track 1 Left, Track 1 Right, Track 2 Left, Track
2 Right). Track 1 was generated as a 440 Hz sine wave with some fading to shape it, while
Track 2 was generated as a 4400 Hz uniform sine wave.&lt;/p&gt;

&lt;p&gt;Instead what I aimed to do was approximate the &amp;ldquo;loudness&amp;rdquo; over time by taking the absolute
value of the waveform (so it is always positive), multiplying the waveform by the sqrt(2)
(to keep it closer to the peaks of the waveform), and passing it through a &lt;a href=&#34;https://en.wikipedia.org/wiki/Low-pass_filter&#34;&gt;low-pass filter&lt;/a&gt; (to essentially make it a rolling average).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;rms_lowpassed_waveform.png&#34; alt=&#34;png&#34; /&gt;&lt;br /&gt;
The result of my loudness function. Note that it approximates the &amp;ldquo;shape&amp;rdquo; and &amp;ldquo;size&amp;rdquo; of
the prior waveforms.&lt;/p&gt;

&lt;h2 id=&#34;audacity-oddities:83c068686d9ce68651d7f4789470e27a&#34;&gt;Audacity Oddities&lt;/h2&gt;

&lt;p&gt;Audacity plugins are extremely powerful, but there are a few things that can bite you,
especially since Audacity does not natively support running a plugin on multiple tracks.
When you run a plugin on multiple tracks, in runs the plugin sequentially on each track,
one at a time.
For my use, editing a track based on another, this was a problem.
There are two variables that can help solve this, however:
1. The &lt;em&gt;TRACK&lt;/em&gt; environmental variable, which has an INDEX property. This property tells which
track the plugin is currently running on. &lt;em&gt;TRACK&lt;/em&gt; also contains the data for the current sound.&lt;br /&gt;
2. The &lt;em&gt;SCRATCH&lt;/em&gt; environmental variable, which is the only usable persistent variable for passing
data between tracks.&lt;/p&gt;

&lt;p&gt;My first instinct was to use the &lt;em&gt;TRACK&lt;/em&gt; INDEX property to get the loudness waveform from
the first track and store it in the &lt;em&gt;SCRATCH&lt;/em&gt; variable. It turns out, however, that Audacity
sounds are just references, and they are cleared after each run of the plugin!&lt;br /&gt;
My next thought was to save the waveform as an array of samples, but that would be several
hundred megabytes worth of memory, which isn&amp;rsquo;t really acceptable.&lt;br /&gt;
My solution to this, then, was to loop over the loudness waveform and fill a list with the changes
in loudness as well as the time the change occured. In the second track, I would then recreate
the loudness waveform from that list. It turns out, Audacity already has a function for doing so -
the &lt;code&gt;pwl-list&lt;/code&gt; function. This saved me from having to write my own.&lt;/p&gt;

&lt;h2 id=&#34;modifying-the-second-track:83c068686d9ce68651d7f4789470e27a&#34;&gt;Modifying the Second Track&lt;/h2&gt;

&lt;p&gt;After recreating the loudness of the first track, I find the loudness of the second. By subtracting
the two (expressed in decibel form rather than linear) with an offset of X db added to the second track,
converting the result back to a linear scale and multiply it by the second track, I am able to ensure
that the loudness of the second track mirros the loudness of the first, offset by X db. This works because the decibel unit is logarithmic, and one property
of logarithms is log(x) + log(y) = log(x*y). So, to change an amplitude X by Y
units, we subtract the two and multiply X by the result expressed back in linear
form.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;end_waveform.png&#34; alt=&#34;png&#34; /&gt;&lt;br /&gt;
The final set of waveforms. Notice that the second set of waveforms has a similar shape to the first set,
while still keeping its musical properties (in this case, pitch). Perhaps a real song sample would show
the results better - perhaps I will update the article with some public domain songs.&lt;/p&gt;

&lt;p&gt;What I&amp;rsquo;ve done is not even close to being perfect, but it doesn&amp;rsquo;t really need to be. I feel it was
a good introduction to a LISP dialect, and my friend was happy with the results.&lt;/p&gt;

&lt;p&gt;The full code is available in this gist:&lt;br /&gt;
&lt;script src=&#34;https://gist.github.com/JohnathonNow/daaa8749a40215b29c51fc6845af0743.js&#34;&gt;&lt;/script&gt;
&lt;a href=&#34;https://gist.github.com/JohnathonNow/daaa8749a40215b29c51fc6845af0743&#34;&gt;Direct link&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wolfrat Chatbot</title>
      <link>https://www.johnbot.me/post/wolfratbot/</link>
      <pubDate>Tue, 05 Apr 2016 01:18:53 -0400</pubDate>
      
      <guid>https://www.johnbot.me/post/wolfratbot/</guid>
      <description>&lt;p&gt;My friends and I primarily communicate through a &lt;a href=&#34;https://groupme.com&#34;&gt;GroupMe&lt;/a&gt; chat that we named &lt;strong&gt;Wolfrat&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To liven the place up, I thought I would add a chatbot.&lt;/p&gt;

&lt;p&gt;So, I quickly threw together (over a day or so) WolfratBot, which uses the
GroupMe bot API. The API HTTP POSTS a given callback URL, which is set to
a &lt;a href=&#34;https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface&#34;&gt;WSGI&lt;/a&gt;
script that decides on the appropriate reply.&lt;br /&gt;
The program is very modular, and new functionality can be added without
disrupting any other modules.&lt;/p&gt;

&lt;p&gt;A simple exchange follows:&lt;br /&gt;
&lt;img src=&#34;20160425_224532.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The source is available on my &lt;a href=&#34;https://github.com/JohnathonNow/wolfratbot&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fundamentals of Computing I Final</title>
      <link>https://www.johnbot.me/post/fndcmp1final/</link>
      <pubDate>Sun, 20 Mar 2016 21:08:52 -0400</pubDate>
      
      <guid>https://www.johnbot.me/post/fndcmp1final/</guid>
      <description>&lt;p&gt;For my &lt;strong&gt;Fundamentals of Computing I&lt;/strong&gt; class final project,
I decided to make a &lt;a href=&#34;https://en.wikipedia.org/wiki/Shoot_%27em_up#Types&#34;&gt;shmup&lt;/a&gt;.&lt;br /&gt;
The game is played at a faster pace perhaps than it should have been,
but I enjoyed making it.&lt;br /&gt;
The graphics are very minimalistic, consisting almost entirely of circles.&lt;br /&gt;
The game features a half-decent level intrepretation system, where
levels are stored in text files with simple commands to handle enemies
and other things. The system had support for branching and conditionals,
though the only condition allowed was time. I had to exercise restraint
to prevent myself from essentially making it a complete language of
its own.&lt;/p&gt;

&lt;p&gt;The game itself is &lt;em&gt;really&lt;/em&gt; hard. Below is a screenshot from the third level:&lt;br /&gt;
&lt;img src=&#34;bhfil.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The source is available on my &lt;a href=&#34;https://github.com/JohnathonNow/fndcmpifinal&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>